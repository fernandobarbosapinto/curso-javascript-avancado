{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA;AACA,IAAIA,oBAAqB,YAAW;;AAEnC,KAAMC,SAAS,CAAC,aAAD,CAAf;AACA,KAAMC,UAAU,EAAhB;AACA,KAAMC,SAAS,YAAf;;AAEA,KAAIC,aAAa,IAAjB;;AAEA,KAAIC,QAAQ,IAAZ;;AAEA;AAEC,+BAAa;AAAA;;AAEZ,SAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACA;;AALF;AAAA;AAAA,mCAOuB;;AAErB,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEvC,SAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,iBAAYI,eAAZ,GAA8B,aAAK;;AAElCd,wBAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AAEA,MAJD;;AAMAR,iBAAYS,SAAZ,GAAwB,aAAK;;AAE5B,UAAG,CAACf,UAAJ,EACCA,aAAaY,EAAEC,MAAF,CAASC,MAAtB;AACA;AACAb,cAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,iBAAWC,KAAX,GAAmB,YAAU;AAC5B,aAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACA,OAFD;AAGD;AACAE,cAAQJ,UAAR;AACA,MAXD;;AAaAM,iBAAYW,OAAZ,GAAsB,aAAK;;AAE1BC,cAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,aAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AAEA,MALD;AAOA,KA9BM,CAAP;AA+BA;AAxCF;AAAA;AAAA,iCA0CsBrB,UA1CtB,EA0CkC;;AAEvBH,WAAOyB,OAAP,CAAe,iBAAS;;AAEpB,SAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiDzB,WAAW0B,iBAAX,CAA6BD,KAA7B;AACjDzB,gBAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AAEH,KALD;AAOH;AAnDR;AAAA;AAAA,qCAqDgC;;AAErB,QAAG5B,UAAH,EAAe;AACXC;AACAD,kBAAa,IAAb;AACAC,aAAQ,IAAR;AACH;AACJ;AA5DR;;AAAA;AAAA;AA8DA,CAxEuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["//Padrão de Projeto Module Pattern\nvar ConnectionFactory = (function (){\n\n\tconst stores = ['negociacoes'];\n\tconst version = 11;\n\tconst dbName = 'aluraframe';\n\n\tvar connection = null;\n\t\n\tvar close = null;\n\n\treturn class ConnectionFactory{\n\n\t\tconstructor(){\n\n\t\t\tthrow new Error('Não é possível criar instâncias de ConnectionFactory');\n\t\t}\n\n\t\tstatic getConnection(){\n\n\t\t\treturn new Promise((resolve, reject) => {\n\n\t\t\t\tlet openRequest = window.indexedDB.open(dbName, version);\n\n\t\t\t\topenRequest.onupgradeneeded = e => {\n\n\t\t\t\t\tConnectionFactory._createStores(e.target.result);\n\n\t\t\t\t};\n\n\t\t\t\topenRequest.onsuccess = e => {\n\n\t\t\t\t\tif(!connection) \n\t\t\t\t\t\tconnection = e.target.result;\n\t\t\t\t\t\t//Monkey Patch do método close\n\t\t\t\t\t\tclose = connection.close.bind(connection);\n\t\t\t\t\t\tconnection.close = function(){\n\t\t\t\t\t\t\tthrow new Error('Você não pode fechar diretamente a conexão');\n\t\t\t\t\t\t};\n\t\t\t\t\t// recebe conexão já existente ou uma que acabou de ser criada\n\t\t\t\t\tresolve(connection);\n\t\t\t\t};\n\n\t\t\t\topenRequest.onerror = e => {\n\n\t\t\t\t\tconsole.log(e.target.error);\n\t\t\t\t\treject(e.target.error.name);\n\n\t\t\t\t};\n\n\t\t\t});\n\t\t}\n\n\t\tstatic _createStores(connection) {\n\n            stores.forEach(store => {\n\n                if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n                connection.createObjectStore(store, { autoIncrement: true});\n\n            });\n\n        }\n\n        static closeConnection() {\n\n            if(connection) {\n                close();\n                connection = null;\n                close = null;\n            }\n        }\n\t}\n})();\n"]}