{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","res","ok","Error","statusText","url","fetch","then","_handleErrors","json","dado","headers","method","body","JSON","stringify"],"mappings":";;;;;;IAAMA,W;;;;;;;gCAESC,G,EAAI;AACjB,OAAG,CAACA,IAAIC,EAAR,EAAY,MAAM,IAAIC,KAAJ,CAAUF,IAAIG,UAAd,CAAN;AACZ,UAAOH,GAAP;AACA;;;sBAEGI,G,EAAI;AAAA;;AAEP,UAAOC,MAAMD,GAAN,EACLE,IADK,CACA;AAAA,WAAO,MAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,IADA,EAELM,IAFK,CAEA;AAAA,WAAON,IAAIQ,IAAJ,EAAP;AAAA,IAFA,CAAP;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;uBAEIJ,G,EAAKK,I,EAAM;AAAA;;AAEf,UAAOJ,MAAMD,GAAN,EAAW;AACjBM,aAAS,EAAC,gBAAe,kBAAhB,EADQ;AAEjBC,YAAQ,MAFS;AAGjBC,UAAMC,KAAKC,SAAL,CAAeL,IAAf;AAHW,IAAX,EAKNH,IALM,CAKD;AAAA,WAAO,OAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,IALC,CAAP;;AAOM;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEH","file":"HttpService.js","sourcesContent":["class HttpService{\n\n\t_handleErrors(res){\n\t\tif(!res.ok) throw new Error(res.statusText);\n\t\treturn res;\n\t}\n\n\tget(url){\n\n\t\treturn fetch(url)\n\t\t\t.then(res => this._handleErrors(res))\n\t\t\t.then(res => res.json());\n\n\t\t// return new Promise((resolve, reject) => {\n\n\t\t// \t//alert(\"Importando Negociações.\");\n\t\t// \tlet xhr = new XMLHttpRequest();\n\t\t// \txhr.open('GET', url);\n\t\t// \txhr.onreadystatechange = () => {\n\t\t// \t\t//0- requisição ainda não iniciada\n\t\t// \t\t//1- conexão com o servidor estabelecida\n\t\t// \t\t//2- requisição recebida\n\t\t// \t\t//3- processando requisição\n\t\t// \t\t//4- requisição está concluída e a resposta está pronta\n\n\t\t// \t\tif(xhr.readyState == 4){\n\t\t// \t\t\tif(xhr.status == 200){\n\t\t// \t\t\t\tconsole.log('Obtendo as negociações do servidor.')\n\t //                \tconsole.log(JSON.parse(xhr.responseText));\n\t //                \tresolve(JSON.parse(xhr.responseText));\n\t                \t\n\t\t// \t\t\t}else{\n\t\t// \t\t\t\tconsole.log(xhr.responseText);\n\t\t// \t\t\t\treject(xhr.responseText);\n\t\t// \t\t\t}\n\t\t// \t\t}\n\t\t// \t};\n\t\t// \txhr.send();\n\t\t// });\n\t}\n\n\tpost(url, dado) {\n\n\t\treturn fetch(url, {\n\t\t\theaders: {'Content-type':'application/json'},\n\t\t\tmethod: 'post',\n\t\t\tbody: JSON.stringify(dado)\n\t\t})\n\t\t.then(res => this._handleErrors(res));\n\n        // return new Promise((resolve, reject) => {\n\n        //     let xhr = new XMLHttpRequest();\n        //     xhr.open(\"POST\", url, true);\n        //     xhr.setRequestHeader(\"Content-type\", \"application/json\");\n        //     xhr.onreadystatechange = () => {\n\n        //         if (xhr.readyState == 4) {\n\n        //             if (xhr.status == 200) {\n\n        //                 resolve(JSON.parse(xhr.responseText));\n        //             } else {\n\n        //                 reject(xhr.responseText);\n        //             }\n        //         }\n        //     };\n        //     xhr.send(JSON.stringify(dado)); // usando JSON.stringifly para converter objeto em uma string no formato JSON.\n        // });\n\n    }\n\n}\n\n"]}