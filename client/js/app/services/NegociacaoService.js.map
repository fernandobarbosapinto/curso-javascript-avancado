{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","http","HttpService","negociacao","ConnectionFactory","getConnection","then","NegociacaoDAO","connection","dao","adiciona","catch","console","log","erro","Error","listaTodos","apagaTodos","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","negociacoes","periodos","reduce","dados","periodo","concat","get","map","Negociacao","Date","objeto","data","quantidade","valor","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\n\n\tconstructor(){\n\n\t\tthis.http = new HttpService();\n\t}\n\n     \n\tcadastra(negociacao){\n\n\t\treturn ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDAO(connection))\n            .then(dao => dao.adiciona(negociacao))\n            .then(() => 'Negociação cadastrada com sucesso')\n            .catch(erro => {\n            \tconsole.log(erro);\n                throw new Error(\"Não foi possível adicionar a negociação\")\n            });\n\n\t}\n\n\tlista(){\n\n\t\treturn ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDAO(connection))\n            .then(dao => dao.listaTodos())\n            .catch( erro => {\n            \tconsole.log(erro);\n            \tthrow new Error('Não foi possível obter as negociações');\n            })\n\t}\n\n\tapaga(){\n\n\t\treturn ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDAO(connection))\n            .then(dao => dao.apagaTodos())\n            .then(() => 'Negociação apagadas com sucesso')\n            .catch( erro => {\n            \tconsole.log(erro);\n            \tthrow new Error('Não foi possível apagar as negociações');\n            })\n\n\t}\n\n    obterNegociacoes() {\n\n        return Promise.all([\n            this.obterNegociacoesDaSemana(),\n            this.obterNegociacoesDaSemanaAnterior(),\n            this.obterNegociacoesDaSemanaRetrasada()\n        ]).then(periodos => {\n\n            let negociacoes = periodos\n                .reduce((dados, periodo) => dados.concat(periodo), []);\n\n            return negociacoes;\n\n        }).catch(erro => {\n            throw new Error(erro);\n        });\n\n    } \n\n    obterNegociacoesDaSemana(){\n\t\t\n        return this.http\n        .get('negociacoes/semana')\n        .then(negociacoes => {\n        \tconsole.log(negociacoes);\n            return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n\n        })\n        .catch(erro => {\n            console.log(erro);\n            throw new Error('Não foi possível obter as negociações da semana');\n        })\n        \n\t}\n\n\tobterNegociacoesDaSemanaAnterior(){\n\n\t\treturn this.http\n        .get('negociacoes/anterior')\n        .then(negociacoes => {\n        \tconsole.log(negociacoes);\n            return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n\n        })\n        .catch(erro => {\n            console.log(erro);\n            throw new Error('Não foi possível obter as negociações da semana anterior');\n    \t});\n        \n\t}\n\n\tobterNegociacoesDaSemanaRetrasada(){\n\n\t\treturn this.http\n        .get('negociacoes/retrasada')\n        .then(negociacoes => {\n        \tconsole.log(negociacoes);\n            return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n\n        })\n        .catch(erro => {\n            console.log(erro);\n            throw new Error('Não foi possível obter as negociações da semana retrasada');\n    \t});\n        \n\t}\n\n\timporta(listaAtual){\n\n\t\treturn this.obterNegociacoes()\n\t\t//validação da negociação. Importar apenas quando as negociações foram novas.\n\t\t.then(negociacoes => \n\t\t\tnegociacoes.filter(negociacao =>\n\t\t\t\t!listaAtual.some(negociacaoExistente =>\n\t\t\t\t\tJSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))\n\t\t)\n\t\t.catch(error => {\n\t\t\tconsole.log(erro);\n\t\t\tthrow new Error('Não foi possível buscar negociações para importar');\t\n\t\t})\n\t}  \n\n}\n\n/*\nclass NegociacaoService {\n\n\tconstructor(){\n\n\t\tthis.http = new HttpService();\n\t}\n\n\tobterNegociacoesDaSemana(){\n\t\t\n        return this.http\n        .get('negociacoes/semana')\n        .then(negociacoes => {\n        \tconsole.log(negociacoes);\n            return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n\n        })\n        .catch(erro => {\n            console.log(erro);\n            throw new Error('Não foi possível obter as negociações da semana');\n        })\n        \n\t}\n\n\tobterNegociacoesDaSemanaAnterior(){\n\n\t\treturn this.http\n        .get('negociacoes/anterior')\n        .then(negociacoes => {\n        \tconsole.log(negociacoes);\n            return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n\n        })\n        .catch(erro => {\n            console.log(erro);\n            throw new Error('Não foi possível obter as negociações da semana anterior');\n    \t});\n        \n\t}\n\n\tobterNegociacoesDaSemanaRetrasada(){\n\n\t\treturn this.http\n        .get('negociacoes/retrasada')\n        .then(negociacoes => {\n        \tconsole.log(negociacoes);\n            return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n\n        })\n        .catch(erro => {\n            console.log(erro);\n            throw new Error('Não foi possível obter as negociações da semana retrasada');\n    \t});\n        \n\t}\n\n/*\n\tobterNegociacoesDaSemanaAnterior(){\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t//alert(\"Importando Negociações.\");\n\t\t\tlet xhr = new XMLHttpRequest();\n\t\t\txhr.open('GET', 'negociacoes/anterior');\n\t\t\txhr.onreadystatechange = () => {\n\t\t\t\t//0- requisição ainda não iniciada\n\t\t\t\t//1- conexão com o servidor estabelecida\n\t\t\t\t//2- requisição recebida\n\t\t\t\t//3- processando requisição\n\t\t\t\t//4- requisição está concluída e a resposta está pronta\n\n\t\t\t\tif(xhr.readyState == 4){\n\t\t\t\t\tif(xhr.status == 200){\n\t\t\t\t\t\tconsole.log('Obtendo as negociações do servidor.')\n\t                \tconsole.log(JSON.parse(xhr.responseText));\n\t                \tresolve(JSON.parse(xhr.responseText)\n\t                \t.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n\t                \t\n\t\t\t\t\t}else{\n\t\t\t\t\t\tconsole.log(xhr.responseText);\n\t\t\t\t\t\treject('Não foi possível obter as negociações da semana anterior.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\txhr.send();\n\t\t});\n\t}\n\n\tobterNegociacoesDaSemanaRetrasada(){\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t//alert(\"Importando Negociações.\");\n\t\t\tlet xhr = new XMLHttpRequest();\n\t\t\txhr.open('GET', 'negociacoes/retrasada');\n\t\t\txhr.onreadystatechange = () => {\n\t\t\t\t//0- requisição ainda não iniciada\n\t\t\t\t//1- conexão com o servidor estabelecida\n\t\t\t\t//2- requisição recebida\n\t\t\t\t//3- processando requisição\n\t\t\t\t//4- requisição está concluída e a resposta está pronta\n\n\t\t\t\tif(xhr.readyState == 4){\n\t\t\t\t\tif(xhr.status == 200){\n\t\t\t\t\t\tconsole.log('Obtendo as negociações do servidor.')\n\t                \tconsole.log(JSON.parse(xhr.responseText));\n\t                \tresolve(JSON.parse(xhr.responseText)\n\t                \t.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n\t                \t\n\t\t\t\t\t}else{\n\t\t\t\t\t\tconsole.log(xhr.responseText);\n\t\t\t\t\t\treject('Não foi possível obter as negociações da semana retrasada.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\txhr.send();\n\t\t});\n\t}\n\n}*/"]}