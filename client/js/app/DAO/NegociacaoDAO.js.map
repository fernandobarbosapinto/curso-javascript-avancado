{"version":3,"sources":["../../app-es6/DAO/NegociacaoDAO.js"],"names":["NegociacaoDAO","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","e","target","error","cursor","openCursor","negociacoes","atual","result","dado","value","push","Negociacao","_data","_quantidade","_valor","continue","name","clear"],"mappings":";;;;;;IAAMA,a;AAEL,2BAAYC,UAAZ,EAAuB;AAAA;;AAEtB,aAAKC,WAAL,GAAmBD,UAAnB;AACA,aAAKE,MAAL,GAAc,aAAd;AAEA;;;;iCAEQC,U,EAAY;AAAA;;AAEd,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,UAAU,MACTN,WADS,CAETO,WAFS,CAEG,CAAC,MAAKN,MAAN,CAFH,EAEiB,WAFjB,EAGTO,WAHS,CAGG,MAAKP,MAHR,EAITQ,GAJS,CAILP,UAJK,CAAd;;AAMAI,wBAAQI,SAAR,GAAoB,aAAK;;AAErBN;AACH,iBAHD;;AAKAE,wBAAQK,OAAR,GAAkB,aAAK;;AAEnBC,4BAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,2BAAO,yCAAP;AACH,iBAJD;AAKH,aAlBM,CAAP;AAmBH;;;qCAEW;AAAA;;AAEX,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEvC,oBAAIY,SAAS,OAAKjB,WAAL,CACXO,WADW,CACC,CAAC,OAAKN,MAAN,CADD,EACe,WADf,EAELO,WAFK,CAEO,OAAKP,MAFZ,EAGLiB,UAHK,EAAb;;AAKM,oBAAIC,cAAc,EAAlB;;AAEAF,uBAAOP,SAAP,GAAmB,aAAK;;AAEnB,wBAAIU,QAAQN,EAAEC,MAAF,CAASM,MAArB;;AAEA,wBAAGD,KAAH,EAAU;AACT,4BAAIE,OAAOF,MAAMG,KAAjB;AACEJ,oCAAYK,IAAZ,CAAiB,IAAIC,UAAJ,CAAeH,KAAKI,KAApB,EAA2BJ,KAAKK,WAAhC,EAA6CL,KAAKM,MAAlD,CAAjB;AACAR,8BAAMS,QAAN;AAEF,qBALD,MAKO;;AAEH;AACA;;AAEAzB,gCAAQe,WAAR;AACH;AACL,iBAhBD;;AAkBAF,uBAAON,OAAP,GAAiB,aAAK;AAClBC,4BAAQC,GAAR,CAAY,WAAWC,EAAEC,MAAF,CAASC,KAAT,CAAec,IAAtC;AACAzB,2BAAO,wCAAP;AACH,iBAHD;AAIN,aA/BM,CAAP;AAgCA;;;qCAEW;AAAA;;AAEX,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEvC,oBAAIC,UAAU,OAAKN,WAAL,CACZO,WADY,CACA,CAAC,OAAKN,MAAN,CADA,EACc,WADd,EAENO,WAFM,CAEM,OAAKP,MAFX,EAGN8B,KAHM,EAAd;;AAKMzB,wBAAQI,SAAR,GAAoB;AAAA,2BAAKN,QAAQ,kCAAR,CAAL;AAAA,iBAApB;;AAEAE,wBAAQK,OAAR,GAAkB,aAAI;AACrBC,4BAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,2BAAO,yCAAP;AACA,iBAHD;AAIN,aAbM,CAAP;AAcA","file":"NegociacaoDAO.js","sourcesContent":["class NegociacaoDAO{\n\n\tconstructor(connection){\n\n\t\tthis._connection = connection;\n\t\tthis._store = 'negociacoes';\n\n\t}\n\n\tadiciona(negociacao) {\n\n        return new Promise((resolve, reject) => {\n\n            let request = this\n                ._connection\n                .transaction([this._store],\"readwrite\")\n                .objectStore(this._store)\n                .add(negociacao);\n\n            request.onsuccess = e => {\n\n                resolve();\n            };\n\n            request.onerror = e => {\n\n                console.log(e.target.error);\n                reject('Não foi possível adicionar a negociação');\n            };                \n        });\n    }\n\n    listaTodos(){\n\n    \treturn new Promise((resolve, reject) => {\n\n    \t\tlet cursor = this._connection\n    \t\t\t.transaction([this._store],'readwrite')\n            \t.objectStore(this._store)\n            \t.openCursor();\n            \n            let negociacoes = [];\n            \t\n            cursor.onsuccess = e => {\n\n                 let atual = e.target.result;\n\n                 if(atual) {\n                 \tlet dado = atual.value;\n                    negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\n                    atual.continue();\n\n                 } else { \n\n                     // quando não há mais objects em nossa store.\n                     // Isso significa que já terminados de popular negociacoes\n\n                     resolve(negociacoes);\n                 }\n            };\n\n            cursor.onerror = e => {\n                console.log('Error:' + e.target.error.name);\n                reject('Não foi possível listar as negociações');\n            };\n    \t});\n    }\n\n    apagaTodos(){\n\n    \treturn new Promise((resolve, reject) => {\n\n    \t\tlet request = this._connection\n    \t\t\t.transaction([this._store],'readwrite')\n            \t.objectStore(this._store)\n            \t.clear();\n\n            request.onsuccess = e => resolve('Negociações apagadas com sucesso');\n            \n            request.onerror = e =>{\n            \tconsole.log(e.target.error);\n            \treject('Não foi possível remover as negociações');\t\n            };\n    \t});\n    }\n}"]}